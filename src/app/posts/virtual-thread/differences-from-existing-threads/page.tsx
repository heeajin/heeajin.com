export default function Page() {
  return (
    <>
      <h2>기존 스레드와 가상 스레드의 차이점</h2>
      <div>
        기존 스레드는 운영체제의 커널 리소스를 사용하는 반면, 가상 스레드는
        사용자 공간에서 관리되며, 실행에 필요한 자원을 최소화합니다.
      </div>
      <div>
        운영체제 스레드를 생성하면 커널이 스레드를 관리 테이블에 동록합니다.
        커널은 스레드가 실행 중인지, 대기 중인지, 종료되었는지 등의 상태를 계속
        추적합니다. 스레드 간 전환이 필요해지면 커널은 상태를 저장하고 복원하는
        과정(컨텍스트 스위칭)을 처리합니다. 이 과정에서 많은 리소스가
        소모됩니다.
      </div>
      <div>
        가상 스레드는 JVM 같은 언어 런타임에서 관리됩니다. 커널에게 관리 요청을
        거의 하지 않으며, 자체적으로 스레드 상태를 저장하고 스케줄링합니다. 가상
        스레드 간 전환은 운영체제의 개입 없이 이루어지므로 훨씬 빠릅니다.
      </div>
      <div>
        왜 운영체제의 개입이 느릴 수 있을까? 운영체제의 개입은 컴텍스트
        전환이라는 개념과 밀접하게 연결됩니다. 컨텍스트 전환은 시간이 걸리며
        특히 CPU 캐시가 무효화되거나 메모리 접근이 증가할 경우 성능 저하를
        유발합니다. 또한 운영체제는 모든 프로세스와 스레드를 관리해야 하므로,
        운영체제가 개입할 때마다 복잡도가 올라가고 시간이 더 소요됩니다.
        운영체제 스레드는 I/O 대기 등의 블로킹 작업 중에도 리소스를 차지합니다.
      </div>
      <div>
        가상 스레드는 왜 더 빠른가? 가상 스레드는 운영체제의 커널 수준 작업을
        우회하고, 사용자 공간에서 작업을 처리합니다.이는 컨텍스트 전환을
        최소화합니다. 가상 스레드는 상태 전환을 운영체제에게 맡기지 않고, 언어
        런타임(JVM 등)이 직접 관리합니다. 이 과정은 메모리 접근, 상태 저장 등이
        사용자 공간에서 이루어지므로 훨씬 가볍습니다. 가상 스레드는 애플리케이션
        로직에 맞춘 스케줄링만 수행하면 되므로 스케줄링이 단순화 됩니다. 그리고
        가상 스레드는 블로킹 작업 중인 스레드를 효율적으로 대기 상태로 전환하여
        리소스를 확보합니다.
      </div>
      <div>
        <table>
          <thead>
            <tr>
              <th>특성</th>
              <th>운영체제 스레드</th>
              <th>가상 스레드</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>생성 비용</td>
              <td>높음</td>
              <td>매우 낮음</td>
            </tr>
            <tr>
              <td>메모리 사용량</td>
              <td>수백 KB~MB</td>
              <td>수KB</td>
            </tr>
            <tr>
              <td>스케줄링</td>
              <td>운영체제 커널</td>
              <td>사용자 공간에서 관리</td>
            </tr>
            <tr>
              <td>블로킹 작업 처리</td>
              <td>비효율적</td>
              <td>효율적</td>
            </tr>
            <tr>
              <td>최대 스레드 수</td>
              <td>제한적(몇 천 개)</td>
              <td>거의 무제한 (수백만 개도 가능)</td>
            </tr>
            <tr>
              <td>코드 변경 필요 여부</td>
              <td>비동기 프로그래밍 필요</td>
              <td>동기 코드 그대로 사용</td>
            </tr>
          </tbody>
        </table>
      </div>
    </>
  );
}
